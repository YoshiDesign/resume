[
    [
        {
            "id" : "ww",
            "title" : "The World Works",
            "tech" : ["react","go","rds","mgo", "d3", "aws"],
            "tech_desc": ["ReactJS", "The Go Programming Language", "Redis", "MongoDB", "D3JS", "Amazon Web Services"],
            "logo" : "worldworks",
            "link" : "<a target='_blank' href='http://myworldworks.com'>MyWorldWorks.com</a>",
            "repo" : "https://github.com/YoshiDesign/ww_sandbox_audit",
            "projects" : [
                {
                    "alt_title" : 0,
                    "desc"  : "The World Works is a collection of interactive SVG  maps of over 140 different nations. The foundational concept is to populate each map with categorized varieties of economic, social, domestic and political data-sets in a level of detail that displays information from a per-region basis, down to a per-city basis. The inspiration to build this came along during covid, when many people's work/life balances became volatile and more unpredictable. An app that could deliver a large amount of data throughput and display it all in a sensible and, even moreso than a digestible format, would present users with a chance to gain a transparent degree of <b>understanding things such as job availability, earnings versus expenses, cost of living analysis (and more) in many different cities</b>, much faster than they could attain this level of insight from similar websites and apps.<p>The full scope of this project became something larger than 1 developer could efficiently support. The World Works has seen approximately 3 years of active development, in tandem with my professional role at the time. I spent over a year collecting and cleaning data before I created the custom aggregates which would eventually promote the efficacies of the frontend. In addition to data visualization, the data has been used to construct dynamic indexes within my own trie search-trees which allow for a functioning (albeit prototypal) smart querying system without the need for machine learning, <b>although I would like to someday adapt a GPT approach to fetching data based on open ended, natural language queries.</b> I think it would be really amazing to be able to ask questions such as \"Where can I make at least 30,000 dollars a year as a welder, but expect to pay less than 10,000 dollars overall for my cost of living?\"</p><p>At the moment, the full set of features are only available while querying the United States. Locating and collecting socio-economic data for the rest of the world is incredibly time consuming, so I'm content to continue building this application for the USA alone, until I might find a team willing to work on this project with me. <b>Working on this stack has been critically important in sharpening my fullstack developer skills while also practicing my DevOps capabilities.</b> I don't think this app will see complete, up to date data-sets for all 140+ nations in the near-term, but I'm very happy that I've managed to build the framework for doing just that, all while making it quite speedy too!</p><p>The app runs on AWS EC2 free-tier, and being a diverse stack (a Go server running a React frontend, a redis key-store and MongoDB) I've automated the build process and deployments with the help of Ansible and Bash, while I also keep a Terraform manifest at the ready in case I ever need to re-provision a new EC2 instance that is immediately amenable to my needs. Python is used for web-scraping the public domain for all sorts of interesting data and subsequently generating data structures from that data. The validation and reliability of all of this data has been another challenge as well as a learning process. I try to collect data from government websites as much as possible, reputable organizations, and surveys such as the US Census. As an aside, I think that Go is a very strong language, despite being less eloquent and having some garbage collection overhead. It's definitely the language that I enjoy working with the most, with PHP being a very close second.</p>",
                    "link" : "",
                    "media" : "",
                    "caption" : ""
                }    
            ]
        },

        {
            "id" : "threed",
            "title" : "3D Graphics Engines",
            "gif": "3dengine",
            "logo": "engines",
            "tech" : ["cpp", "vs", "vulkan", "opengl"],
            "tech_desc": ["C++", "Microsoft Visual Studio", "Vulkan-API v1.3.2", "OpenGL"],
            "repo": "https://github.com/YoshiDesign/VEngine",
            "projects" : [
                {
                    "alt_title" : 0,
                    "desc"  : "I've always been interested in 3D graphics, and have undergone some coursework in mathematics during my free time in order to effectively support this area of interest. Commercial engine are fun, but the development of my own custom engines is what comprises this area of my expertise. I'm very fond of Vulkan and OpenGL and the vastness of their disciplines which have taken my programming skills to the molten core of game development, rendering and shading. I don't plan on building my own games quite yet; for now these rendering engines keep me up to speed with the latest advancements in computer graphics while allowing me to practice mathematics and also GLSL.",
                    "link" : "",
                    "media" : "/assets/previews/retrocade.MP4",
                    "caption" : "Part of an arcade series I'm working on."
                }    
            ]
        },
        {
            "id" : "psi",
            "logo": "dtrmp_twit",
            "title" : "Personal Space Invaders - Python Game with Sentiment Analysis",
            "tech" : ["py","pgame", "aws"],
            "tech_desc": ["Python3", "PyGame", "Amazon Web Services"],
            "repo" : "https://github.com/YoshiDesign/P.S.I.",
            "projects" : [
                {
                    "alt_title" : 0,
                    "desc"  : "Personal space invaders started as a silly idea turned proof-of-concept. What began as a Python PyGame client and a Flask API on Heroku, is now turning into a React Native mobile app which uses AWS Lambda to query Tweets and turn them into a game of Space Invaders. This game is being completely rebuilt and will be in development for some time whilst I tackle other endeavors. In summary, tweets are given a natural language sentiment-analysis to determine the difficulty of the gameplay. Each Twitter handle can invoke custom settings, which I found to be the most alluring element (as did a few hundred Redditors). Once the scene is ready, tweets from any user's timeline are streamed to the player in realtime, and can be destroyed character-by-character. <p><b>The Python version can be found from the GitHub link, however at this time you'll need your own upstream Twitter-API to retrieve any tweets.</b></p>",
                    "link" : "<a href='https://www.reddit.com/r/gamedev/comments/7z41jr/i_made_a_game_that_lets_you_shoot_at_any_persons/' target='_blank'>Check out the Reddit post</a>",
                    "media" : [],
                    "caption" : "Passing judgements upon our former president, programatically, so you don't have to."
                }    
            ]
        },
        {
            "id" : "ocv",
            "logo": "robo",
            "title" : "Doublevision: OpenCV & Embedded Systems",
            "tech" : ["vs","ocv", "cpp","c", "cmake"],
            "tech_desc": ["Microsoft Visual Studio", "OpenCV", "C++", "The C Programming Language", "CMake"],
            "repo" : "https://github.com/YoshiDesign/doublevision",
            "projects" : [
                {
                    "alt_title" : 0,
                    "desc"  : "Doublevision is a sandbox for combining the image processing and machine learning capabilities of OpenCV, with the GPIO capabilities of Arduino and Raspberry Pi (and smells a lot like an early build-your-own terminator sandbox). This learning endeavor is what eventually lead me to studying embedded systems and real-time operating systems (RTOS) using C and some x86-ASM (see the next section), with electronics engineering and prototyping as a side-track. For a while I became a practicing electronics engineer who enjoyed soldering laser diodes onto programmable machines for fun. An aspiring Thomas Young at the time! This also introduced me to <a target='_blank' href='https://www.youtube.com/watch?v=cdTLewJCL1Y&t=1210s'>libgpio</a> and how to program a Raspberry-Pi with C and C++, which at the time was not a well documented subject.</p>",
                    "link" : "<a target='_blank' href='https://github.com/YoshiDesign/doublevision'>Check out the Doublevision repo on GitHub</a>",
                    "media" : ["/assets/previews/ocv1.png", "/assets/previews/ocv2.png", "/assets/previews/ocv3.png"],
                    "caption" : ""
                }    
            ]
        },
        {
            "id" : "lyros",
            "title" : "LyrOs: An Embedded Systems OS",
            "tech" : ["iar","c", "cmake", "ln", "arm"],
            "tech_desc" : ["IAR Embedded Workbench", "The C Programming Language", "CMake", "Linux", "ARM"],
            "repo" : "https://github.com/YoshiDesign/lyros",
            "projects" : [
                {
                    "alt_title" : 0,
                    "desc"  : "This project was a deep dive into both operating system design and embedded systems. LyrOs is a multithreaded operating system from scratch which targets the Texas-Instrument ARM Cortex-M series of microcontrollers. In its current state it is a minimum viable OS from the ground up with custom startup code, stack frame swapping, and interrupt routines. This OS also safeguards its user from the pitfalls of concurrent programming.",
                    "link" : "",
                    "media" : ["/assets/previews/ocv1.png", "/assets/previews/ocv2.png", "/assets/previews/ocv3.png"],
                    "caption" : ""
                }    
            ]
        },
        {
            "id" : "webume",
            "title" : "<b>Notes About this Website</b>",
            "logo": "website",
            "tech" : ["ts", "ang","aws"],
            "tech_desc" : ["TypeScript", "AngularJS", "Amazon Web Services"],
            "repo" : "https://github.com/YoshiDesign/resume",
            "projects" : [
                {
                    "alt_title" : 0,
                    "desc"  : "This site is an Angular application hosted on AWS Amplify. It also contains the AWS Lambda functions that my Personal Space Invaders project will utilize in the future. Thanks to AWS Amplify, deployments are streamed automatically after a simple push to Git.",
                    "link" : "",
                    "media" : [],
                    "caption" : ""
                }    
            ]
        }
    ],
    [
        { 
            "id" : "cs50ai",
            "title" : "Harvard CS50-AI",
            "tech" : ["pdf"],
            "desc"  : "Introduction to Artificial Intelligence with Python. This course taught me the concepts and algorithms at the foundation of modern artificial intelligence. I took my education in AI 1 step further and began using Jupyter Labs as a platform for which to practice ML concepts.",
            "media" : "",
            "alt_title" : 0
        },
        {
            "id" : "cs50x",
            "title" : "Harvard CS50",
            "tech" : ["pdf"],
            "desc"  : "Introduction to Computer Science. Taught by the mighty David Malan, Gordon McKay Professor of the Practice of Computer Science. This course was so amazing that I began taking it a 2nd time. I was a very active tutor on the CS50 reddit long after completion which subsequently prompted the creation of my WordPress blog.",
            "media" : "",
            "alt_title" : 0
        },
        { 
            "id" : "cs50b",
            "title" : "Harvard CS50-B",
            "tech" : ["pdf"],
            "desc"  : "Computer Science for Business Professionals. Also taught by David Malan, this class focused more on the abstractions which computer science offers in your business domain. It covers everything from network architecure to cloud computing and security.",
            "media" : "",
            "alt_title" : 0
        },
        {
            "id" : "aplus",
            "title" : "CompTIA A+ (2017 - 2021)",
            "tech" : ["pdf"],
            "desc"  : "Certifies general knowledge & practices in hardware, networking and software in the field of Information Technology.",
            "media" : "",
            "alt_title" : 0
        },
        {
            "id" : "cysa",
            "title" : "CompTIA CySA+ (2018 - 2021)",
            "tech" : ["pdf"],
            "desc"  : "A much more involved certificate, the CySA+ demonstrates knowledge and practical skills in the fields of Cyber Forensics and Cyber Defense. Through this certification I have learned how to utilize many of the tools available in the Ethical Hacker's toolbelt.",
            "media" : "",
            "alt_title" : 0
        }
    ]
]
